#!/usr/bin/env python
# vim: set fileencoding=utf-8 :

# Copyright (C) 2010  Jekyll Wu <adaptee at gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
Calculate CRC32 checksum
"""


import binascii
from argparse import ArgumentParser

def calc_crc32_for_file(filename):
    """ return crc32 checksum as hex string with length 8 """
    with open(filename,'rb') as fileobj:
        return  "%08x" % calc_crc32( fileobj.read() )

def calc_crc32(data):
    """ return crc32 checksum as unsigned interger """
    return binascii.crc32(data) & 0xFFFFFFFF

if __name__ == '__main__':

    argparser = ArgumentParser(
                description= "Calculate CRC32 checksum."
                              )

    argparser.add_argument( "-b", "--brief",
                            dest='brief',
                            default=False,
                            action='store_true',
                            help="File to be stripped of BOM."
                          )

    argparser.add_argument( "files",
                            metavar="FILE",
                            nargs='+',
                            help="File to be stripped of BOM."
                          )

    args = argparser.parse_args()

    if len(args.files) == 1:
        args.brief = True

    error_msg = ""

    for filename in args.files :
        try:
            crc32 = calc_crc32_for_file(filename)
        except IOError as e:
            error_msg += ("Fail to open \t%s" % e.filename)
        else:
            if not args.brief:
                print ( "%s\t%s" % (crc32, filename) )
            else:
                print ( "%s" % crc32)

    if error_msg :
        print ("")
        print (error_msg)

